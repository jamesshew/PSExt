using System;
using System.Runtime.InteropServices;
using Microsoft.Diagnostics.Runtime.Interop;

// ReSharper disable InconsistentNaming
namespace PSExt.Extension.x86
{


	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x18)]
	public struct ACTIVATION_CONTEXT_STACK
	{
		[FieldOffset(0x000)] public IntPtr ActiveFrame;
		[FieldOffset(0x004)] public LIST_ENTRY FrameListCache;
		[FieldOffset(0x00c)] public uint Flags;
		[FieldOffset(0x010)] public uint NextCookieSequenceNumber;
		[FieldOffset(0x014)] public uint StackId;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x8)]
	public struct CLIENT_ID
	{
		[FieldOffset(0x000)] public IntPtr UniqueProcess;
		[FieldOffset(0x004)] public IntPtr UniqueThread;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0xc)]
	public struct CURDIR
	{
		[FieldOffset(0x000)] public UNICODE_STRING DosPath;
		[FieldOffset(0x008)] public IntPtr Handle;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x8)]
	public unsafe struct EXCEPTION_REGISTRATION_RECORD
	{
		[FieldOffset(0x000)] public IntPtr Next;
		[FieldOffset(0x004)] public IntPtr* Handler;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x4e0)]
	public unsafe struct GDI_TEB_BATCH
	{
		[FieldOffset(0x000)] public uint BitField;
		[FieldOffset(0x004)] public uint HDC;
		[FieldOffset(0x008)] public fixed uint Buffer [310];


		public uint Offset => ((BitField & 0x7FFFFFFF) >> 0);
		public bool HasRenderingCommand => (BitField & 0x80000000) >> 31 == 1;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x8)]
	public struct LIST_ENTRY
	{
		[FieldOffset(0x000)] public IntPtr Flink;
		[FieldOffset(0x004)] public IntPtr Blink;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x1c)]
	public struct NT_TIB
	{
		[FieldOffset(0x000)] public IntPtr ExceptionList;
		[FieldOffset(0x004)] public IntPtr StackBase;
		[FieldOffset(0x008)] public IntPtr StackLimit;
		[FieldOffset(0x00c)] public IntPtr SubSystemTib;
		[FieldOffset(0x010)] public IntPtr FiberData;
		[FieldOffset(0x010)] public uint Version;
		[FieldOffset(0x014)] public IntPtr ArbitraryUserPointer;
		[FieldOffset(0x018)] public IntPtr Self;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x460)]
	public unsafe struct PEB
	{
		[FieldOffset(0x000)] public byte InheritedAddressSpace;
		[FieldOffset(0x001)] public byte ReadImageFileExecOptions;
		[FieldOffset(0x002)] public byte BeingDebugged;
		[FieldOffset(0x003)] public byte BitField;
		[FieldOffset(0x004)] public IntPtr Mutant;
		[FieldOffset(0x008)] public IntPtr ImageBaseAddress;
		[FieldOffset(0x00c)] public IntPtr Ldr;
		[FieldOffset(0x010)] public IntPtr ProcessParameters;
		[FieldOffset(0x014)] public IntPtr SubSystemData;
		[FieldOffset(0x018)] public IntPtr ProcessHeap;
		[FieldOffset(0x01c)] public IntPtr FastPebLock;
		[FieldOffset(0x020)] public IntPtr AtlThunkSListPtr;
		[FieldOffset(0x024)] public IntPtr IFEOKey;
		[FieldOffset(0x028)] public uint CrossProcessFlags;
		[FieldOffset(0x02c)] public IntPtr KernelCallbackTable;
		[FieldOffset(0x02c)] public IntPtr UserSharedInfoPtr;
		[FieldOffset(0x030)] public fixed uint SystemReserved [1];
		[FieldOffset(0x034)] public uint AtlThunkSListPtr32;
		[FieldOffset(0x038)] public IntPtr ApiSetMap;
		[FieldOffset(0x03c)] public uint TlsExpansionCounter;
		[FieldOffset(0x040)] public IntPtr TlsBitmap;
		[FieldOffset(0x044)] public fixed uint TlsBitmapBits [2];
		[FieldOffset(0x04c)] public IntPtr ReadOnlySharedMemoryBase;
		[FieldOffset(0x050)] public IntPtr SparePvoid0;
		[FieldOffset(0x054)] public IntPtr ReadOnlyStaticServerData;
		[FieldOffset(0x058)] public IntPtr AnsiCodePageData;
		[FieldOffset(0x05c)] public IntPtr OemCodePageData;
		[FieldOffset(0x060)] public IntPtr UnicodeCaseTableData;
		[FieldOffset(0x064)] public uint NumberOfProcessors;
		[FieldOffset(0x068)] public uint NtGlobalFlag;
		[FieldOffset(0x070)] public long CriticalSectionTimeout;
		[FieldOffset(0x078)] public uint HeapSegmentReserve;
		[FieldOffset(0x07c)] public uint HeapSegmentCommit;
		[FieldOffset(0x080)] public uint HeapDeCommitTotalFreeThreshold;
		[FieldOffset(0x084)] public uint HeapDeCommitFreeBlockThreshold;
		[FieldOffset(0x088)] public uint NumberOfHeaps;
		[FieldOffset(0x08c)] public uint MaximumNumberOfHeaps;
		[FieldOffset(0x090)] public IntPtr ProcessHeaps;
		[FieldOffset(0x094)] public IntPtr GdiSharedHandleTable;
		[FieldOffset(0x098)] public IntPtr ProcessStarterHelper;
		[FieldOffset(0x09c)] public uint GdiDCAttributeList;
		[FieldOffset(0x0a0)] public IntPtr LoaderLock;
		[FieldOffset(0x0a4)] public uint OSMajorVersion;
		[FieldOffset(0x0a8)] public uint OSMinorVersion;
		[FieldOffset(0x0ac)] public ushort OSBuildNumber;
		[FieldOffset(0x0ae)] public ushort OSCSDVersion;
		[FieldOffset(0x0b0)] public uint OSPlatformId;
		[FieldOffset(0x0b4)] public uint ImageSubsystem;
		[FieldOffset(0x0b8)] public uint ImageSubsystemMajorVersion;
		[FieldOffset(0x0bc)] public uint ImageSubsystemMinorVersion;
		[FieldOffset(0x0c0)] public uint ActiveProcessAffinityMask;
		[FieldOffset(0x0c4)] public fixed uint GdiHandleBuffer [34];
		[FieldOffset(0x14c)] public IntPtr PostProcessInitRoutine;
		[FieldOffset(0x150)] public IntPtr TlsExpansionBitmap;
		[FieldOffset(0x154)] public fixed uint TlsExpansionBitmapBits [32];
		[FieldOffset(0x1d4)] public uint SessionId;
		[FieldOffset(0x1d8)] public ulong AppCompatFlags;
		[FieldOffset(0x1e0)] public ulong AppCompatFlagsUser;
		[FieldOffset(0x1e8)] public IntPtr pShimData;
		[FieldOffset(0x1ec)] public IntPtr AppCompatInfo;
		[FieldOffset(0x1f0)] public UNICODE_STRING CSDVersion;
		[FieldOffset(0x1f8)] public IntPtr ActivationContextData;
		[FieldOffset(0x1fc)] public IntPtr ProcessAssemblyStorageMap;
		[FieldOffset(0x200)] public IntPtr SystemDefaultActivationContextData;
		[FieldOffset(0x204)] public IntPtr SystemAssemblyStorageMap;
		[FieldOffset(0x208)] public uint MinimumStackCommit;
		[FieldOffset(0x20c)] public IntPtr FlsCallback;
		[FieldOffset(0x210)] public LIST_ENTRY FlsListHead;
		[FieldOffset(0x218)] public IntPtr FlsBitmap;
		[FieldOffset(0x21c)] public fixed uint FlsBitmapBits [4];
		[FieldOffset(0x22c)] public uint FlsHighIndex;
		[FieldOffset(0x230)] public IntPtr WerRegistrationData;
		[FieldOffset(0x234)] public IntPtr WerShipAssertPtr;
		[FieldOffset(0x238)] public IntPtr pUnused;
		[FieldOffset(0x23c)] public IntPtr pImageHeaderHash;
		[FieldOffset(0x240)] public uint TracingFlags;
		[FieldOffset(0x248)] public ulong CsrServerReadOnlySharedMemoryBase;
		[FieldOffset(0x250)] public uint TppWorkerpListLock;
		[FieldOffset(0x254)] public LIST_ENTRY TppWorkerpList;
		[FieldOffset(0x25c)] public IntPtr WaitOnAddressHashTable;


		public bool ImageUsesLargePages => (BitField & 0x0001) >> 0 == 1;
		public bool IsProtectedProcess => (BitField & 0x0002) >> 1 == 1;
		public bool IsImageDynamicallyRelocated => (BitField & 0x0004) >> 2 == 1;
		public bool SkipPatchingUser32Forwarders => (BitField & 0x0008) >> 3 == 1;
		public bool IsPackagedProcess => (BitField & 0x0010) >> 4 == 1;
		public bool IsAppContainer => (BitField & 0x0020) >> 5 == 1;
		public bool IsProtectedProcessLight => (BitField & 0x0040) >> 6 == 1;
		public bool SpareBits => (BitField & 0x0080) >> 7 == 1;

		public bool ProcessInJob => (CrossProcessFlags & 0x0001) >> 0 == 1;
		public bool ProcessInitializing => (CrossProcessFlags & 0x0002) >> 1 == 1;
		public bool ProcessUsingVEH => (CrossProcessFlags & 0x0004) >> 2 == 1;
		public bool ProcessUsingVCH => (CrossProcessFlags & 0x0008) >> 3 == 1;
		public bool ProcessUsingFTH => (CrossProcessFlags & 0x0010) >> 4 == 1;
		public uint ReservedBits0 => ((CrossProcessFlags & 0xFFFFFFE0) >> 5);

		public bool HeapTracingEnabled => (TracingFlags & 0x0001) >> 0 == 1;
		public bool CritSecTracingEnabled => (TracingFlags & 0x0002) >> 1 == 1;
		public bool LibLoaderTracingEnabled => (TracingFlags & 0x0004) >> 2 == 1;
		public uint SpareTracingBits => ((TracingFlags & 0xFFFFFFF8) >> 3);

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x30)]
	public struct PEB_LDR_DATA
	{
		[FieldOffset(0x000)] public uint Length;
		[FieldOffset(0x004)] public byte Initialized;
		[FieldOffset(0x008)] public IntPtr SsHandle;
		[FieldOffset(0x00c)] public LIST_ENTRY InLoadOrderModuleList;
		[FieldOffset(0x014)] public LIST_ENTRY InMemoryOrderModuleList;
		[FieldOffset(0x01c)] public LIST_ENTRY InInitializationOrderModuleList;
		[FieldOffset(0x024)] public IntPtr EntryInProgress;
		[FieldOffset(0x028)] public byte ShutdownInProgress;
		[FieldOffset(0x02c)] public IntPtr ShutdownThreadId;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x4)]
	public struct PROCESSOR_NUMBER
	{
		[FieldOffset(0x000)] public ushort Group;
		[FieldOffset(0x002)] public byte Number;
		[FieldOffset(0x003)] public byte Reserved;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0xc)]
	public struct RTL_ACTIVATION_CONTEXT_STACK_FRAME
	{
		[FieldOffset(0x000)] public IntPtr Previous;
		[FieldOffset(0x004)] public IntPtr ActivationContext;
		[FieldOffset(0x008)] public uint Flags;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x18)]
	public struct RTL_CRITICAL_SECTION
	{
		[FieldOffset(0x000)] public IntPtr DebugInfo;
		[FieldOffset(0x004)] public int LockCount;
		[FieldOffset(0x008)] public int RecursionCount;
		[FieldOffset(0x00c)] public IntPtr OwningThread;
		[FieldOffset(0x010)] public IntPtr LockSemaphore;
		[FieldOffset(0x014)] public uint SpinCount;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x20)]
	public struct RTL_CRITICAL_SECTION_DEBUG
	{
		[FieldOffset(0x000)] public ushort Type;
		[FieldOffset(0x002)] public ushort CreatorBackTraceIndex;
		[FieldOffset(0x004)] public IntPtr CriticalSection;
		[FieldOffset(0x008)] public LIST_ENTRY ProcessLocksList;
		[FieldOffset(0x010)] public uint EntryCount;
		[FieldOffset(0x014)] public uint ContentionCount;
		[FieldOffset(0x018)] public uint Flags;
		[FieldOffset(0x01c)] public ushort CreatorBackTraceIndexHigh;
		[FieldOffset(0x01e)] public ushort SpareUSHORT;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x10)]
	public struct RTL_DRIVE_LETTER_CURDIR
	{
		[FieldOffset(0x000)] public ushort Flags;
		[FieldOffset(0x002)] public ushort Length;
		[FieldOffset(0x004)] public uint TimeStamp;
		[FieldOffset(0x008)] public STRING DosPath;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x2a4)]
	public struct RTL_USER_PROCESS_PARAMETERS
	{
		[FieldOffset(0x000)] public uint MaximumLength;
		[FieldOffset(0x004)] public uint Length;
		[FieldOffset(0x008)] public uint Flags;
		[FieldOffset(0x00c)] public uint DebugFlags;
		[FieldOffset(0x010)] public IntPtr ConsoleHandle;
		[FieldOffset(0x014)] public uint ConsoleFlags;
		[FieldOffset(0x018)] public IntPtr StandardInput;
		[FieldOffset(0x01c)] public IntPtr StandardOutput;
		[FieldOffset(0x020)] public IntPtr StandardError;
		[FieldOffset(0x024)] public CURDIR CurrentDirectory;
		[FieldOffset(0x030)] public UNICODE_STRING DllPath;
		[FieldOffset(0x038)] public UNICODE_STRING ImagePathName;
		[FieldOffset(0x040)] public UNICODE_STRING CommandLine;
		[FieldOffset(0x048)] public IntPtr Environment;
		[FieldOffset(0x04c)] public uint StartingX;
		[FieldOffset(0x050)] public uint StartingY;
		[FieldOffset(0x054)] public uint CountX;
		[FieldOffset(0x058)] public uint CountY;
		[FieldOffset(0x05c)] public uint CountCharsX;
		[FieldOffset(0x060)] public uint CountCharsY;
		[FieldOffset(0x064)] public uint FillAttribute;
		[FieldOffset(0x068)] public uint WindowFlags;
		[FieldOffset(0x06c)] public uint ShowWindowFlags;
		[FieldOffset(0x070)] public UNICODE_STRING WindowTitle;
		[FieldOffset(0x078)] public UNICODE_STRING DesktopInfo;
		[FieldOffset(0x080)] public UNICODE_STRING ShellInfo;
		[FieldOffset(0x088)] public UNICODE_STRING RuntimeData;
		[FieldOffset(0x090)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores0;
		[FieldOffset(0x0a0)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores1;
		[FieldOffset(0x0b0)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores2;
		[FieldOffset(0x0c0)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores3;
		[FieldOffset(0x0d0)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores4;
		[FieldOffset(0x0e0)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores5;
		[FieldOffset(0x0f0)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores6;
		[FieldOffset(0x100)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores7;
		[FieldOffset(0x110)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores8;
		[FieldOffset(0x120)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores9;
		[FieldOffset(0x130)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores10;
		[FieldOffset(0x140)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores11;
		[FieldOffset(0x150)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores12;
		[FieldOffset(0x160)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores13;
		[FieldOffset(0x170)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores14;
		[FieldOffset(0x180)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores15;
		[FieldOffset(0x190)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores16;
		[FieldOffset(0x1a0)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores17;
		[FieldOffset(0x1b0)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores18;
		[FieldOffset(0x1c0)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores19;
		[FieldOffset(0x1d0)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores20;
		[FieldOffset(0x1e0)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores21;
		[FieldOffset(0x1f0)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores22;
		[FieldOffset(0x200)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores23;
		[FieldOffset(0x210)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores24;
		[FieldOffset(0x220)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores25;
		[FieldOffset(0x230)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores26;
		[FieldOffset(0x240)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores27;
		[FieldOffset(0x250)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores28;
		[FieldOffset(0x260)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores29;
		[FieldOffset(0x270)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores30;
		[FieldOffset(0x280)] public RTL_DRIVE_LETTER_CURDIR CurrentDirectores31;
		[FieldOffset(0x290)] public uint EnvironmentSize;
		[FieldOffset(0x294)] public uint EnvironmentVersion;
		[FieldOffset(0x298)] public IntPtr PackageDependencyData;
		[FieldOffset(0x29c)] public uint ProcessGroupId;
		[FieldOffset(0x2a0)] public uint LoaderThreads;


		public static unsafe RTL_DRIVE_LETTER_CURDIR* GetCurrentDirectores(RTL_USER_PROCESS_PARAMETERS* item, int zeroBasedIndex)
		{
				return &item->CurrentDirectores0 + zeroBasedIndex;
		}

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x8)]
	public unsafe struct STRING
	{
		[FieldOffset(0x000)] public ushort Length;
		[FieldOffset(0x002)] public ushort MaximumLength;
		[FieldOffset(0x004)] public IntPtr* Buffer;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x1000)]
	public unsafe struct TEB
	{
		[FieldOffset(0x000)] public NT_TIB NtTib;
		[FieldOffset(0x01c)] public IntPtr EnvironmentPointer;
		[FieldOffset(0x020)] public CLIENT_ID ClientId;
		[FieldOffset(0x028)] public IntPtr ActiveRpcHandle;
		[FieldOffset(0x02c)] public IntPtr ThreadLocalStoragePointer;
		[FieldOffset(0x030)] public IntPtr ProcessEnvironmentBlock;
		[FieldOffset(0x034)] public uint LastErrorValue;
		[FieldOffset(0x038)] public uint CountOfOwnedCriticalSections;
		[FieldOffset(0x03c)] public IntPtr CsrClientThread;
		[FieldOffset(0x040)] public IntPtr Win32ThreadInfo;
		[FieldOffset(0x044)] public fixed uint User32Reserved [26];
		[FieldOffset(0x0ac)] public fixed uint UserReserved [5];
		[FieldOffset(0x0c0)] public IntPtr WOW32Reserved;
		[FieldOffset(0x0c4)] public uint CurrentLocale;
		[FieldOffset(0x0c8)] public uint FpSoftwareStatusRegister;
		[FieldOffset(0x0cc)] public IntPtr ReservedForDebuggerInstrumentation;
		[FieldOffset(0x10c)] public IntPtr SystemReserved1;
		[FieldOffset(0x1a4)] public int ExceptionCode;
		[FieldOffset(0x1a8)] public IntPtr ActivationContextStackPointer;
		[FieldOffset(0x1ac)] public uint InstrumentationCallbackSp;
		[FieldOffset(0x1b0)] public uint InstrumentationCallbackPreviousPc;
		[FieldOffset(0x1b4)] public uint InstrumentationCallbackPreviousSp;
		[FieldOffset(0x1b8)] public byte InstrumentationCallbackDisabled;
		[FieldOffset(0x1b9)] public fixed byte SpareBytes [23];
		[FieldOffset(0x1d0)] public uint TxFsContext;
		[FieldOffset(0x1d4)] public GDI_TEB_BATCH GdiTebBatch;
		[FieldOffset(0x6b4)] public CLIENT_ID RealClientId;
		[FieldOffset(0x6bc)] public IntPtr GdiCachedProcessHandle;
		[FieldOffset(0x6c0)] public uint GdiClientPID;
		[FieldOffset(0x6c4)] public uint GdiClientTID;
		[FieldOffset(0x6c8)] public IntPtr GdiThreadLocalInfo;
		[FieldOffset(0x6cc)] public fixed uint Win32ClientInfo [62];
		[FieldOffset(0x7c4)] public IntPtr glDispatchTable;
		[FieldOffset(0xb68)] public fixed uint glReserved1 [29];
		[FieldOffset(0xbdc)] public IntPtr glReserved2;
		[FieldOffset(0xbe0)] public IntPtr glSectionInfo;
		[FieldOffset(0xbe4)] public IntPtr glSection;
		[FieldOffset(0xbe8)] public IntPtr glTable;
		[FieldOffset(0xbec)] public IntPtr glCurrentRC;
		[FieldOffset(0xbf0)] public IntPtr glContext;
		[FieldOffset(0xbf4)] public uint LastStatusValue;
		[FieldOffset(0xbf8)] public UNICODE_STRING StaticUnicodeString;
		[FieldOffset(0xc00)] public short StaticUnicodeBuffer;
		[FieldOffset(0xe0c)] public IntPtr DeallocationStack;
		[FieldOffset(0xe10)] public IntPtr TlsSlots;
		[FieldOffset(0xf10)] public LIST_ENTRY TlsLinks;
		[FieldOffset(0xf18)] public IntPtr Vdm;
		[FieldOffset(0xf1c)] public IntPtr ReservedForNtRpc;
		[FieldOffset(0xf20)] public IntPtr DbgSsReserved;
		[FieldOffset(0xf28)] public uint HardErrorMode;
		[FieldOffset(0xf2c)] public IntPtr Instrumentation;
		[FieldOffset(0xf50)] public Guid ActivityId;
		[FieldOffset(0xf60)] public IntPtr SubProcessTag;
		[FieldOffset(0xf64)] public IntPtr PerflibData;
		[FieldOffset(0xf68)] public IntPtr EtwTraceData;
		[FieldOffset(0xf6c)] public IntPtr WinSockData;
		[FieldOffset(0xf70)] public uint GdiBatchCount;
		[FieldOffset(0xf74)] public PROCESSOR_NUMBER CurrentIdealProcessor;
		[FieldOffset(0xf74)] public uint IdealProcessorValue;
		[FieldOffset(0xf74)] public byte ReservedPad0;
		[FieldOffset(0xf75)] public byte ReservedPad1;
		[FieldOffset(0xf76)] public byte ReservedPad2;
		[FieldOffset(0xf77)] public byte IdealProcessor;
		[FieldOffset(0xf78)] public uint GuaranteedStackBytes;
		[FieldOffset(0xf7c)] public IntPtr ReservedForPerf;
		[FieldOffset(0xf80)] public IntPtr ReservedForOle;
		[FieldOffset(0xf84)] public uint WaitingOnLoaderLock;
		[FieldOffset(0xf88)] public IntPtr SavedPriorityState;
		[FieldOffset(0xf8c)] public uint ReservedForCodeCoverage;
		[FieldOffset(0xf90)] public IntPtr ThreadPoolData;
		[FieldOffset(0xf94)] public IntPtr TlsExpansionSlots;
		[FieldOffset(0xf98)] public uint MuiGeneration;
		[FieldOffset(0xf9c)] public uint IsImpersonating;
		[FieldOffset(0xfa0)] public IntPtr NlsCache;
		[FieldOffset(0xfa4)] public IntPtr pShimData;
		[FieldOffset(0xfa8)] public ushort HeapVirtualAffinity;
		[FieldOffset(0xfaa)] public ushort LowFragHeapDataSlot;
		[FieldOffset(0xfac)] public IntPtr CurrentTransactionHandle;
		[FieldOffset(0xfb0)] public IntPtr ActiveFrame;
		[FieldOffset(0xfb4)] public IntPtr FlsData;
		[FieldOffset(0xfb8)] public IntPtr PreferredLanguages;
		[FieldOffset(0xfbc)] public IntPtr UserPrefLanguages;
		[FieldOffset(0xfc0)] public IntPtr MergedPrefLanguages;
		[FieldOffset(0xfc4)] public uint MuiImpersonation;
		[FieldOffset(0xfc8)] public ushort CrossTebFlags;
		[FieldOffset(0xfca)] public ushort SameTebFlags;
		[FieldOffset(0xfcc)] public IntPtr TxnScopeEnterCallback;
		[FieldOffset(0xfd0)] public IntPtr TxnScopeExitCallback;
		[FieldOffset(0xfd4)] public IntPtr TxnScopeContext;
		[FieldOffset(0xfd8)] public uint LockCount;
		[FieldOffset(0xfdc)] public int WowTebOffset;
		[FieldOffset(0xfe0)] public IntPtr ResourceRetValue;
		[FieldOffset(0xfe4)] public IntPtr ReservedForWdf;
		[FieldOffset(0xfe8)] public ulong ReservedForCrt;
		[FieldOffset(0xff0)] public Guid EffectiveContainerId;


		public ushort SpareCrossTebBits => (ushort)((CrossTebFlags & 0xFFFF) >> 0);

		public bool SafeThunkCall => (SameTebFlags & 0x0001) >> 0 == 1;
		public bool InDebugPrint => (SameTebFlags & 0x0002) >> 1 == 1;
		public bool HasFiberData => (SameTebFlags & 0x0004) >> 2 == 1;
		public bool SkipThreadAttach => (SameTebFlags & 0x0008) >> 3 == 1;
		public bool WerInShipAssertCode => (SameTebFlags & 0x0010) >> 4 == 1;
		public bool RanProcessInit => (SameTebFlags & 0x0020) >> 5 == 1;
		public bool ClonedThread => (SameTebFlags & 0x0040) >> 6 == 1;
		public bool SuppressDebugMsg => (SameTebFlags & 0x0080) >> 7 == 1;
		public bool DisableUserStackWalk => (SameTebFlags & 0x0100) >> 8 == 1;
		public bool RtlExceptionAttached => (SameTebFlags & 0x0200) >> 9 == 1;
		public bool InitialThread => (SameTebFlags & 0x0400) >> 10 == 1;
		public bool SessionAware => (SameTebFlags & 0x0800) >> 11 == 1;
		public bool LoadOwner => (SameTebFlags & 0x1000) >> 12 == 1;
		public bool LoaderWorker => (SameTebFlags & 0x2000) >> 13 == 1;
		public ushort SpareSameTebBits => (ushort)((SameTebFlags & 0xC000) >> 14);

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0xc)]
	public struct TEB_ACTIVE_FRAME
	{
		[FieldOffset(0x000)] public uint Flags;
		[FieldOffset(0x004)] public IntPtr Previous;
		[FieldOffset(0x008)] public IntPtr Context;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x8)]
	public unsafe struct TEB_ACTIVE_FRAME_CONTEXT
	{
		[FieldOffset(0x000)] public uint Flags;
		[FieldOffset(0x004)] public IntPtr* FrameName;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x8)]
	public unsafe struct UNICODE_STRING
	{
		[FieldOffset(0x000)] public ushort Length;
		[FieldOffset(0x002)] public ushort MaximumLength;
		[FieldOffset(0x004)] public IntPtr* Buffer;

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x2cc)]
	public unsafe struct CONTEXT
	{
		[FieldOffset(0x000)] public uint ContextFlags;
		[FieldOffset(0x004)] public uint Dr0;
		[FieldOffset(0x008)] public uint Dr1;
		[FieldOffset(0x00c)] public uint Dr2;
		[FieldOffset(0x010)] public uint Dr3;
		[FieldOffset(0x014)] public uint Dr6;
		[FieldOffset(0x018)] public uint Dr7;
		[FieldOffset(0x01c)] public FLOATING_SAVE_AREA FloatSave;
		[FieldOffset(0x08c)] public uint SegGs;
		[FieldOffset(0x090)] public uint SegFs;
		[FieldOffset(0x094)] public uint SegEs;
		[FieldOffset(0x098)] public uint SegDs;
		[FieldOffset(0x09c)] public uint Edi;
		[FieldOffset(0x0a0)] public uint Esi;
		[FieldOffset(0x0a4)] public uint Ebx;
		[FieldOffset(0x0a8)] public uint Edx;
		[FieldOffset(0x0ac)] public uint Ecx;
		[FieldOffset(0x0b0)] public uint Eax;
		[FieldOffset(0x0b4)] public uint Ebp;
		[FieldOffset(0x0b8)] public uint Eip;
		[FieldOffset(0x0bc)] public uint SegCs;
		[FieldOffset(0x0c0)] public uint EFlags;
		[FieldOffset(0x0c4)] public uint Esp;
		[FieldOffset(0x0c8)] public uint SegSs;
		[FieldOffset(0x0cc)] public fixed byte ExtendedRegisters [512];

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x200)]
	public unsafe struct XSAVE_FORMAT
	{
		[FieldOffset(0x000)] public ushort ControlWord;
		[FieldOffset(0x002)] public ushort StatusWord;
		[FieldOffset(0x004)] public byte TagWord;
		[FieldOffset(0x005)] public byte Reserved1;
		[FieldOffset(0x006)] public ushort ErrorOpcode;
		[FieldOffset(0x008)] public uint ErrorOffset;
		[FieldOffset(0x00c)] public ushort ErrorSelector;
		[FieldOffset(0x00e)] public ushort Reserved2;
		[FieldOffset(0x010)] public uint DataOffset;
		[FieldOffset(0x014)] public ushort DataSelector;
		[FieldOffset(0x016)] public ushort Reserved3;
		[FieldOffset(0x018)] public uint MxCsr;
		[FieldOffset(0x01c)] public uint MxCsr_Mask;
		[FieldOffset(0x020)] public F128PARTS64 FloatRegisters0;
		[FieldOffset(0x030)] public F128PARTS64 FloatRegisters1;
		[FieldOffset(0x040)] public F128PARTS64 FloatRegisters2;
		[FieldOffset(0x050)] public F128PARTS64 FloatRegisters3;
		[FieldOffset(0x060)] public F128PARTS64 FloatRegisters4;
		[FieldOffset(0x070)] public F128PARTS64 FloatRegisters5;
		[FieldOffset(0x080)] public F128PARTS64 FloatRegisters6;
		[FieldOffset(0x090)] public F128PARTS64 FloatRegisters7;
		[FieldOffset(0x0a0)] public F128PARTS64 XmmRegisters0;
		[FieldOffset(0x0b0)] public F128PARTS64 XmmRegisters1;
		[FieldOffset(0x0c0)] public F128PARTS64 XmmRegisters2;
		[FieldOffset(0x0d0)] public F128PARTS64 XmmRegisters3;
		[FieldOffset(0x0e0)] public F128PARTS64 XmmRegisters4;
		[FieldOffset(0x0f0)] public F128PARTS64 XmmRegisters5;
		[FieldOffset(0x100)] public F128PARTS64 XmmRegisters6;
		[FieldOffset(0x110)] public F128PARTS64 XmmRegisters7;
		[FieldOffset(0x120)] public fixed byte Reserved4 [224];


		public static F128PARTS64* GetFloatRegisters(XSAVE_FORMAT* item, int zeroBasedIndex)
		{
				return &item->FloatRegisters0 + zeroBasedIndex;
		}

		public static F128PARTS64* GetXmmRegisters(XSAVE_FORMAT* item, int zeroBasedIndex)
		{
				return &item->XmmRegisters0 + zeroBasedIndex;
		}

	}
 
	/// Generated by SystemStruct.ps1
	[StructLayout(LayoutKind.Explicit, Size=0x70)]
	public unsafe struct FLOATING_SAVE_AREA
	{
		[FieldOffset(0x000)] public uint ControlWord;
		[FieldOffset(0x004)] public uint StatusWord;
		[FieldOffset(0x008)] public uint TagWord;
		[FieldOffset(0x00c)] public uint ErrorOffset;
		[FieldOffset(0x010)] public uint ErrorSelector;
		[FieldOffset(0x014)] public uint DataOffset;
		[FieldOffset(0x018)] public uint DataSelector;
		[FieldOffset(0x01c)] public fixed byte RegisterArea [80];
		[FieldOffset(0x06c)] public uint Spare0;

	}


}
